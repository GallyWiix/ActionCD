# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io  # 默认为 docker.io，即去 Docker Hub 上找
  IMAGE_NAME: ${{ github.repository }}  # 使用 GitHub Actions 提供的能力，可以自动获取仓库名
  IMAGE_TAG: latest  # Docker Image 的 tag，为了方便我直接设置 latest
  PORT: 8085  # 服务要暴露的端口，可以改

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8  # 可以改版本
        uses: actions/setup-java@v3
        with:
          java-version: '8' # 可以改版本
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B -DskipTests=true package --file pom.xml
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{env.IMAGE_NAME}}
      - name: echo
        run: echo $GITHUB_REF_NAME
      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#      - name: Update dependency graph
#        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
            images: ${{ env.IMAGE_NAME }}
            tags: |
              # set latest tag for default branch
              type=raw,value=latest,enable={{is_default_branch}}
              # tag event
              type=ref,enable=true,priority=600,prefix=,suffix=,event=tag

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # 连接到远程服务器
#      - name: Connect to server
#        uses: webfactory/ssh-agent@v0.4.1
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      # 初始化 knownhosts
#      - name: Setup knownhosts
#        run: ssh-keyscan ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
#
#      # 触发服务器部署脚本
#      - name: Trigger server deployment script
#        run: |
#          ssh root@${{ secrets.SERVER_HOST }} "docker stop ${{ env.IMAGE_NAME }} || true"
#          ssh root@${{ secrets.SERVER_HOST }} "docker rm ${{ env.IMAGE_NAME }} || true"
#          ssh root@${{ secrets.SERVER_HOST }} "docker pull ${{ secrets.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
#          ssh root@${{ secrets.SERVER_HOST }} "docker run -p ${{ env.PORT }}:${{ env.PORT}} --name ${{ env.IMAGE_NAME }} -d ${{ secrets.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
